}
else
{
lines(1:length(data3$thr),data3$thr, col = subj_col[i], type = "p", pch = subj_sym[i])
lines(1:2,data3$thr[1:2],col = "red",type = "p", pch = subj_sym[i])
lines(17:18,data3$thr[17:18],col = "red",type = "p", pch = subj_sym[i])
lines(1:length(data3$thr),data3$thr, col = subj_col[i],type = "l")
}
#}
}
db = dbConnect(dbDriver("SQLite"), "/Users/nawalelboghdady/Library/matlab/S1_E2/results/jvo_db.sqlite",loadable.extensions = TRUE)
sql = sprintf("SELECT thr.subject AS subj, baseline, session, threshold, i
FROM thr")
res = dbSendQuery(db, sql)
data = fetch(res, n=-1)
ylims = c(min(data$thr)-2,max(data$thr)+2)
subj_sym = c("x","o","+")
subj_col = c("blue","black","green")
i = 0
for (subj in unique(data$subj))
{
i = i+1
#         for (session in c(1,2))
#         {
#Thr per Trial:
#-------------
db = dbConnect(dbDriver("SQLite"), "/Users/nawalelboghdady/Library/matlab/S1_E2/results/jvo_db.sqlite",loadable.extensions = TRUE)
sql = sprintf("SELECT thr.subject AS subj, baseline, session, threshold AS thr
FROM thr
WHERE subj = '%s'",
subj)
res = dbSendQuery(db, sql)
data3 = fetch(res, n=-1)
#Plot that data:
#--------------
if (subj == 'S01')
{
plot(1:length(data3$thr),data3$thr, pch = subj_sym[i], col = subj_col[i],
xlab = "Trial", ylab = "VTL JND (semitones re. ref.)",
main = sprintf("VTL JNDs as a function of Trial Number"),ylim = ylims)
lines(1:2,data3$thr[1:2],col = "red",type = "p", pch = subj_sym[i])
lines(17:18,data3$thr[17:18],col = "red",type = "p", pch = subj_sym[i])
#lines(1:length(data3$thr),data3$thr,col = subj_col[i],type = "l")
}
else
{
lines(1:length(data3$thr),data3$thr, col = subj_col[i], type = "p", pch = subj_sym[i])
lines(1:2,data3$thr[1:2],col = "red",type = "p", pch = subj_sym[i])
lines(17:18,data3$thr[17:18],col = "red",type = "p", pch = subj_sym[i])
#lines(1:length(data3$thr),data3$thr, col = subj_col[i],type = "l")
}
#}
}
library("xlsx")
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileurl,destfile = "./Q3.xlsx",method = "curl")
dateDownloaded = date()
colI = 7:15
rowI = 18:23
dat = read.xlsx("./Q3.xlsx", sheetIndex = 1, colIndex = colI, rowIndex = rowI)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("xml")
install.packages("XML")
library("xml")
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
library("XML")
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
library("XML")
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml "
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
library("XML")
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
doc = htmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
xmlName(rootNode)
doc = xmlTreeParse(fileurl, useInternal = TRUE)
fileurl = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE, method = "curl")
rootNode = xmlRoot(doc)
fileurl = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(fileurl, useInternal = TRUE)
rootNode = xmlRoot(doc)
xmlName(rootNode)
xpathSApply(rootNode,"//zipcode",xmlValue == 21231)
xpathSApply(rootNode,"//zipcode",xmlValue = 21231)
xpathSApply(rootNode,"//zipcode",xmlValue == "21231")
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"node[@zipcode='21231']",xmlValue)
xpathSApply(rootNode,"zipcode[@zipcode='21231']",xmlValue)
xpathSApply(rootNode,"zipcode['21231']",xmlValue)
xpathSApply(rootNode,"\\zipcode['21231']",xmlValue)
dataQ4 = data.table(xpathSApply(rootNode,"\\zipcode",xmlValue))
library("data.table")
dataQ4 = data.table(xpathSApply(rootNode,"\\zipcode",xmlValue))
dataQ4 = xpathSApply(rootNode,"\\zipcode",xmlValue)
dataQ4 = data.table(xpathSApply(rootNode,"//zipcode",xmlValue))
View(dataQ4)
dataQ4[,.N,V1 == 21231]
fileurl = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileurl,destfile = "./Q5.csv",method = "curl")
DT = fread("./Q5.csv")
View(DT)
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
?RMySQL
??RMySQL
db = dbConnect(dbDriver("SQLite"), user = "genome",host = "genome-mysql.cse.ucsc.edu")
sql = sprintf("SELECT *
FROM genome")
res = dbSendQuery(db, sql)
data = fetch(res, n=-1)
library("RSQLite")
db = dbConnect(dbDriver("SQLite"), user = "genome",host = "genome-mysql.cse.ucsc.edu")
sql = sprintf("SELECT *
FROM genome")
res = dbSendQuery(db, sql)
data = fetch(res, n=-1)
db = dbConnect(MySQL(), user = "genome",host = "genome-mysql.cse.ucsc.edu")
sql = sprintf("SELECT *
FROM genome")
res = dbGetQuery(db, sql)
data = fetch(res, n=-1)
db = dbConnect(MySQL(), user = "genome",host = "genome-mysql.cse.ucsc.edu")
res = dbGetQuery(db, "show databases;")
dbDisconnect(db)
install.packages("RMySQL")
library("RMySQL")
db = dbConnect(MySQL(), user = "genome",host = "genome-mysql.cse.ucsc.edu")
res = dbGetQuery(db, "show databases;")
dbDisconnect(db)
View(res)
?sqldf
install.packages("sqldf")
source('~/Desktop/datascience/03-Cleaning data/Quiz2.R')
View(acs)
library("sqldf")
bla = sqldf("select pwgtp1 from acs where AGEP < 50")
View(bla)
nunu = unique(acs$AGEP)
nunu
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
nunu2 = sqldf("select distinct AGEP from acs")
nunu == nunu2
?httr
install.packages("httr")
?content
library("httr")
?content
urlhtml = "http://biostat.jhsph.edu/~jleek/contact.html"
html = get(urlhtml)
content2 = content(html,as="text")
parsedHTML = htmlParse(content2,asText = TRUE)
library("XML")
?htmlParse
urlhtml = "http://biostat.jhsph.edu/~jleek/contact.html"
html = get(urlhtml)
content2 = content(html,as="text")
parsedHTML = htmlParse(content2,asText = TRUE)
urlhtml = "http://biostat.jhsph.edu/~jleek/contact.html "
html = get(urlhtml)
content2 = content(html,as="text")
parsedHTML = htmlParse(content2,asText = TRUE)
urlhtml = "http://biostat.jhsph.edu/~jleek/contact.html"
html = GET(urlhtml)
content2 = content(html,as="text")
parsedHTML = htmlParse(content2,asText = TRUE)
xpathSApply(parsedHTML,"//title",xmlValue)
parsedHTML
nchar(parsedHTML[[10]])
nchar(parsedHTML[[20]])
nchar(parsedHTML[[30]])
nchar(parsedHTML[[100]])
html2xml = xmlRoot(parsedHTML)
nchar(html2xml[[10]])
nchar(html2xml[[20]])
nchar(html2xml[[30]])
nchar(html2xml[[100]])
html2xml
nchar(content2[[10]])
nchar(content2[[20]])
nchar(content2[[30]])
nchar(content2[[100]])
nchar(content2[10])
nchar(content2[10])
nchar(content2[20])
nchar(content2[30])
nchar(content2[100])
nchar(content2[10,])
nchar(content2[20,])
nchar(content2[30,])
nchar(content2[100,])
html2xml
parsedHTML = htmlTreeParse(content2,asText = TRUE)
parsedHTML
parsedHTML = htmlTreeParse(content2,useInternal = TRUE)
parsedHTML[10]
parsedHTML[[10]
]
html2xml = xmlRoot(parsedHTML)
html2xml[[10]]
html2xml[[20]]
html2xml[[30]]
parsedHTML = htmlTreeParse(urlhtml,useInternal = TRUE)
html2xml = xmlRoot(parsedHTML)
html2xml[[10]]
?read.fwf
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url,destfile = "./Quiz2_Q5.for",method = "curl")
forfile = read.fwf("./Quiz2_Q5.for", widths, sep=" ", as.is = FALSE,
skip = 0)
forfile = read.fwf("./Quiz2_Q5.for", sep=" ", as.is = FALSE,
)
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = FALSE,
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = FALSE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for", widths = 5 , sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", as.is = TRUE, skip = 0)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ")
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
?readLines
urlhtml = con("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
close(con)
htmlCode
urlhtml = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(urlhtml)
close(urlhtml)
htmlCode
htmlCode[1]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 2)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 3)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 4)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 3)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1, skip = 4)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
skip = 2,col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(9,8,8,8,8) ,sep=" ", row.names = 1,
skip = 2,col.names )
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2,col.names = c("Week","Nino1+2","Nino3","Nino34","Nino4") )
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1, skip = 1)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) ,sep=" ", row.names = 1,
skip = 2)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(url,destfile = "./Quiz2_Q5.for",method = "curl")
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,13,13,13,13) , row.names = 1,
skip = 2)
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,4,4,4,4,4,4,4,4) , row.names = 1,
skip = 4)
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, row.names = 1, col.names = c("Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, row.names = 1, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
View(forfile)
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4,row.names = "Week" , col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
forfile = read.fwf("./Quiz2_Q5.for",  widths = c(10,9,9,4,4,9,9,4,4) , row.names = 1,
skip = 4, col.names = c("Week","Nino12SST", "Nino12SSTA",
"Nino3SST", "Nino3SSTA",
"Nino34SST","Nino34SSTA",
"Nino4SST","Nino4SSTA"))
sum(forfile$Nino3SST)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "b7bdc4df5eb0df020aa9ab966b747ef7ed1a4f90")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "b7bdc4df5eb0df020aa9ab966b747ef7ed1a4f90")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages('httpuv')
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
library("httpuv")
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4873d2f8fb0c3040facd",
secret = "c7da282ce84ae8a6472a2ddc937103c59d99f6df")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
content(req)
req$full_name
req
req2 = data.frame(req)
df = fromJSON(toJSON(req))
install.packages("jsonlite")
install.packages("jsonlite")
library("jsonlite")
df = fromJSON(toJSON(req))
df = fromJSON(toJSON(content(req))
)
library(httr)
library("httpuv")
df = fromJSON(toJSON(content(req)))
View(df)
library(dplyr)
library("dplyr")
install.packages("dplyr")
library("dplyr")
setwd("~/Desktop/datascience/03-Cleaning data/project")
?read.table
library(knitr)
??kintr
??knitr
?kintr
?knitr
knitr(README.Rmd)
install.packages('knitr', dependencies = TRUE)
install.packages("knitr", dependencies = TRUE)
knit(README.Rmd)
library(knitr)
?knit
knit("README.Rmd")
library(knitr)
?knit
knit("README.Rmd")
library(knitr)
?knit
knit("README.Rmd")
