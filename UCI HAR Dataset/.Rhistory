#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
install.packages('httpuv')
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "0a8a6cc4e37099df55c1",
secret = "5284c2b4a64dcd489481ba4ba974e3aa1d1f9657")
# 3. Get OAuth credentials
github_token <- oauth1.0_token(oauth_endpoints("github"), myapp)
# 4. Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
library("httpuv")
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
library(httr)
library("httpuv")
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "4873d2f8fb0c3040facd",
secret = "c7da282ce84ae8a6472a2ddc937103c59d99f6df")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit",gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos",gtoken)
stop_for_status(req)
content(req)
content(req)
req$full_name
req
req2 = data.frame(req)
df = fromJSON(toJSON(req))
install.packages("jsonlite")
install.packages("jsonlite")
library("jsonlite")
df = fromJSON(toJSON(req))
df = fromJSON(toJSON(content(req))
)
library(httr)
library("httpuv")
df = fromJSON(toJSON(content(req)))
View(df)
library(dplyr)
library("dplyr")
install.packages("dplyr")
library("dplyr")
library("data.table")
library("sqldf")
library("dplyr")
#I.a Assemble the Training dataset:
#----------------------------------
#1. Read in the training data:
col_widths = 0*(1:561)+16 #each column in the X_train dataset is fixed at a width of 16 chars
col_names = readLines(con = file("./features.txt", encoding = "UTF8"))
Xtrain = read.fwf("./train/X_train.txt",  widths = col_widths,
skip = 0, col.names = col_names)
#Keep only the mean and std measurements:
col_toBeKept = grep("mean|std",col_names)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
#I.b Assemble the Test dataset:
#------------------------------
#1. Read in the training data:
Xtest = read.fwf("./test/X_test.txt",  widths = col_widths,
skip = 0, col.names = col_names)
#Keep only the mean and std measurements:
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = read.fwf("./test/subject_test.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
#I.c Merge the two datasets:
#---------------------------
#XMerged = merge(Xtrain2,Xtest2,by = "Subject", all = FALSE)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
setwd("~/Desktop/datascience/03-Cleaning data/UCI HAR Dataset")
library("data.table")
library("sqldf")
library("dplyr")
#I.a Assemble the Training dataset:
#----------------------------------
#1. Read in the training data:
col_widths = 0*(1:561)+16 #each column in the X_train dataset is fixed at a width of 16 chars
col_names = readLines(con = file("./features.txt", encoding = "UTF8"))
Xtrain = read.fwf("./train/X_train.txt",  widths = col_widths,
skip = 0, col.names = col_names)
#Keep only the mean and std measurements:
col_toBeKept = grep("mean|std",col_names)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
#I.b Assemble the Test dataset:
#------------------------------
#1. Read in the training data:
Xtest = read.fwf("./test/X_test.txt",  widths = col_widths,
skip = 0, col.names = col_names)
#Keep only the mean and std measurements:
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = read.fwf("./test/subject_test.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
#I.c Merge the two datasets:
#---------------------------
#XMerged = merge(Xtrain2,Xtest2,by = "Subject", all = FALSE)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
query = sprintf("SELECT AVG(*)
FROM XMerged
GROUP BY Subject, Activity")
sql_query = sqldf(query)
bla = new_col_names
bla
bla + "AVG"
bla[2] + "AVG"
??str
??string
bla2 = paste("AVG(", bla, "),")
bla2
headings = paste("AVG(", new_col_names, "),")
query = sprintf("SELECT '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
View(sql_query)
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query
)
View(sql_query)
new_col_names = readLines(con = file("./ColCodes.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
View(Xtrain2)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
#new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
new_col_names = readLines(con = file("./ColCodes.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
View(Xtrain2)
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = read.fwf("./test/subject_test.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
#I.c Merge the two datasets:
#---------------------------
#XMerged = merge(Xtrain2,Xtest2,by = "Subject", all = FALSE)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
View(XMerged)
headings = paste("AVG(", new_col_names, "),")
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
#new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
new_col_names = readLines(con = file("./ColCodes.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = read.fwf("./test/subject_test.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
headings = paste("AVG(", new_col_names, "),")
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
#new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
new_col_names = readLines(con = file("./ColCodes.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = read.fwf("./train/subject_train.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = read.fwf("./test/subject_test.txt",  widths = 1, skip = 0, col.names = "Subject")
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
headings = paste("AVG(", new_col_names, "),")
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
View(sql_query)
query = sprintf("SELECT Subject, Activity, %s
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
headings = as.character(paste("AVG(", new_col_names, "),"))
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
View(sql_query)
??as.char
??as.string
??string
headings = toString(paste("AVG(", new_col_names, "),"))
headings = toString(paste("AVG(", new_col_names, ")"))
headings
query = sprintf("SELECT Subject, Activity, '%s'
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
View(sql_query)
query = sprintf("SELECT Subject, Activity, %s
FROM XMerged
GROUP BY Subject, Activity", headings)
sql_query = sqldf(query)
View(sql_query)
Xout = sqldf(query)
Xout = arrange(Xout,Activity,Subject)
View(Xout)
max(XMerged$Subject)
tail(XMerged)
View(subj)
max(subj)
min(subj)
Xtrain2 = Xtrain[,col_toBeKept]
#Store the column names in a file to edit them:
#write(col_names[col_toBeKept],file = "Modified_ColNames.txt")
#new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
new_col_names = readLines(con = file("./ColCodes.txt", encoding = "UTF8"))
#Extract Activity names for each record:
act_names = data.table(read.fwf("./activity_labels.txt", widths = c(-2,20), col.names = "Activity"))
#Replace all underscores with spaces:
act_names = sub("_"," ", act_names$Activity)
#Add activity names to Xtrain2:
ytrain = read.fwf("./train/y_train.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtrain2 = data.frame(Activity = ytrain,Xtrain2)
for (i in 1:length(act_names))
{
Xtrain2$Activity = sub(sprintf("%s",i),act_names[i],Xtrain2$Activity)
}
#Add Subject information:
subj = readLines(con = file("./train/subject_train.txt", encoding = "UTF8"))
Xtrain2 = data.frame(Subject = subj, Xtrain2)
#Arrange by Subject and Activity:
Xtrain2 = arrange(Xtrain2,Subject,Activity)
#Rename:
Xtrain2 = setnames(Xtrain2, old = names(Xtrain2[3:length(Xtrain2)]), new = new_col_names)
Xtest2 = Xtest[,col_toBeKept]
#Add activity names to Xtrain2:
ytest = read.fwf("./test/y_test.txt",  widths = 1, skip = 0, col.names = "Activity")
Xtest2 = data.frame(Activity = ytest,Xtest2)
for (i in 1:length(act_names))
{
Xtest2$Activity = sub(sprintf("%s",i),act_names[i],Xtest2$Activity)
}
#Add Subject information:
subj = readLines(con = file("./test/subject_test.txt", encoding = "UTF8"))
Xtest2 = data.frame(Subject = subj, Xtest2)
#Arrange by Subject and Activity:
Xtest2 = arrange(Xtest2,Subject,Activity)
#Rename:
Xtest2 = setnames(Xtest2, old = names(Xtest2[3:length(Xtest2)]), new = new_col_names)
XMerged = rbind(Xtrain2, Xtest2)
XMerged = arrange(XMerged,Subject,Activity)
max(subj)
subj
max(subj)
max(XMerged$Subject)
max(as.numeric(as.character(XMerged$Subject)))
headings = toString(paste("AVG(", new_col_names, ")"))
query = sprintf("SELECT Subject, Activity, %s
FROM XMerged
GROUP BY Subject, Activity", headings)
Xout = sqldf(query)
Xout = arrange(Xout,Activity,Subject)
View(Xout)
Xout = arrange(Xout,Subject,Activity)
View(Xout)
Xout = arrange(Xout,Activity,as.numeric(as.character(Subject)))
View(Xout)
?write.table
write.table(Xout, file = "Xout-codes.txt", sep = " ", row.names = FALSE)
write.table(Xout, file = "Xout-codes.txt", row.names = FALSE)
write.table(Xout, file = "Xout-codes.txt", row.names = FALSE)
write.table(Xout, file = "Xout-codes.txt", row.names = FALSE, quote = FALSE)
write.table(Xout, file = "Xout-codes.txt", row.names = FALSE, quote = FALSE,
fileEncoding = "UTF8")
write.table(Xout, file = "Xout-codes.txt", row.names = FALSE, quote = FALSE,
fileEncoding = "UTF8")
new_col_names = readLines(con = file("./Modified_ColNames2.txt", encoding = "UTF8"))
Xout = setnames(Xout, old = names(Xout[3:length(Xout)]), new = new_col_names)
write.table(Xout, file = "Xout-fullnames.txt", row.names = FALSE, quote = FALSE,
fileEncoding = "UTF8")
